<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on G-量子变化</title>
    <link>https://lavender1900.github.io/post/</link>
    <description>Recent content in Posts on G-量子变化</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 16:00:23 +0800</lastBuildDate>
    
	<atom:link href="https://lavender1900.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows下使用Visual Studio 2019和Win10 SDK编译Postgre Sql 9.6</title>
      <link>https://lavender1900.github.io/compile_pg_9.6_with_vs2019_and_win10_sdk/</link>
      <pubDate>Tue, 28 Jan 2020 16:00:23 +0800</pubDate>
      
      <guid>https://lavender1900.github.io/compile_pg_9.6_with_vs2019_and_win10_sdk/</guid>
      <description>新年马上就要到了，不知道正在看这篇文章的你是不是跟我一样，买了《数据库查询优化器的艺术》这本书，立下宏愿要横扫源码澄清玉宇，结果被&amp;quot;从零编译Postgresql&amp;quot;这个第一关小Boss按在地上狂虐呢？
如果是的话，让我来手把手现场教学怎么反手虐Boss
 我选择的PG版本是9.6.10。各位请酌情选择自己看对眼的版本，我不保证其他版本能顺利编译哈。
还有，我编译完成的PG是32位的，想要编译为64位的朋友这篇文章可能不适合你。
打个比喻，按照官方文档从源码编译就像是走在平坦的大马路上，忽然你看到有个浅浅的水坑，自信的你微微一笑，依据文档指示踩了上去，然后整个人就淹没了。
没错，编译源码是件很头痛的事情，因为文档里包含的内容太简单了，各位意外情况直接让人崩溃。尤其是像我这样一直浸淫在Java的程序员，对Windows平台下的编译许久不接触，直接上手比较困难，各种报错更是得花费相当的时间才能找到源头。故而，我决定发扬社会主义核心价值观，前人栽树后人乘凉，只求付出不求回报的原则，将我走过的弯路记录下来，为希望研究数据库源码的各位提供借鉴，极大提高各位的幸福指数和社会生产力。
 首先请各位参阅PG的官方编译文档 ，至少你得知道有哪些依赖以及必要的前置步骤。
然后我要告诉你，先别急着去找这些依赖，文档里记录的依赖有些是不正确的，更要命的是编译的时候不会报错，等到编译完成你会发现 — WTF? 程序为什么运行不起来:-(
OK，下面就开始主题 —— 从零编译Postgresql
 一. 配置文件 在src/tools/msvc目录下建立config.pl文件，下面贴一下我的配置文件内容给大家作个参考，大家根据自身情况调整就好了
use warnings; our $config = { asserts =&amp;gt; 0, # --enable-cassert	 nls =&amp;gt; &amp;#34;C:\\MinGW&amp;#34;, # --enable-nls=&amp;lt;path&amp;gt; tcl =&amp;gt; &amp;#34;C:\\Tcl&amp;#34;, # --with-tcl=&amp;lt;path&amp;gt; perl =&amp;gt; &amp;#34;C:\\Perl&amp;#34;, # --with-perl python =&amp;gt; &amp;#34;C:\\Python\\Python38-32&amp;#34;, # --with-python=&amp;lt;path&amp;gt; openssl =&amp;gt; &amp;#34;C:\\openssl&amp;#34;, # --with-openssl=&amp;lt;path&amp;gt; krb5	=&amp;gt; &amp;#34;C:\\Program Files (x86)\\MIT\\Kerberos&amp;#34;, uuid =&amp;gt; &amp;#34;E:\\ossp_uuid&amp;#34;, # --with-ossp-uuid xml =&amp;gt; &amp;#34;E:\\libxml&amp;#34;, # --with-libxml=&amp;lt;path&amp;gt; xslt =&amp;gt; &amp;#34;E:\\libxslt&amp;#34;, # --with-libxslt=&amp;lt;path&amp;gt; iconv =&amp;gt; &amp;#34;C:\\MinGW&amp;#34;, # (not in configure, path to iconv) zlib =&amp;gt; &amp;#34;E:\\zlib-win32&amp;#34; # --with-zlib=&amp;lt;path&amp;gt; }; 1; 二.</description>
    </item>
    
  </channel>
</rss>